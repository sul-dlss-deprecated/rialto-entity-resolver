// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/sul-dlss-labs/rialto-entity-resolver/generated/models"
)

// FindGrantOKCode is the HTTP code returned for type FindGrantOK
const FindGrantOKCode int = 200

/*FindGrantOK returns a URI for the grant in RIALTO

swagger:response findGrantOK
*/
type FindGrantOK struct {

	/*contains the actual URI
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewFindGrantOK creates FindGrantOK with default headers values
func NewFindGrantOK() *FindGrantOK {

	return &FindGrantOK{}
}

// WithPayload adds the payload to the find grant o k response
func (o *FindGrantOK) WithPayload(payload string) *FindGrantOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the find grant o k response
func (o *FindGrantOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FindGrantOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// FindGrantNotFoundCode is the HTTP code returned for type FindGrantNotFound
const FindGrantNotFoundCode int = 404

/*FindGrantNotFound Grant not found

swagger:response findGrantNotFound
*/
type FindGrantNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewFindGrantNotFound creates FindGrantNotFound with default headers values
func NewFindGrantNotFound() *FindGrantNotFound {

	return &FindGrantNotFound{}
}

// WithPayload adds the payload to the find grant not found response
func (o *FindGrantNotFound) WithPayload(payload *models.ErrorResponse) *FindGrantNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the find grant not found response
func (o *FindGrantNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FindGrantNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
