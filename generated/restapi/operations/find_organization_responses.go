// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/sul-dlss/rialto-entity-resolver/generated/models"
)

// FindOrganizationOKCode is the HTTP code returned for type FindOrganizationOK
const FindOrganizationOKCode int = 200

/*FindOrganizationOK returns a URI for the organization in Rialto

swagger:response findOrganizationOK
*/
type FindOrganizationOK struct {

	/*contains the actual URI
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewFindOrganizationOK creates FindOrganizationOK with default headers values
func NewFindOrganizationOK() *FindOrganizationOK {

	return &FindOrganizationOK{}
}

// WithPayload adds the payload to the find organization o k response
func (o *FindOrganizationOK) WithPayload(payload string) *FindOrganizationOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the find organization o k response
func (o *FindOrganizationOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FindOrganizationOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// FindOrganizationNotFoundCode is the HTTP code returned for type FindOrganizationNotFound
const FindOrganizationNotFoundCode int = 404

/*FindOrganizationNotFound Organization not found

swagger:response findOrganizationNotFound
*/
type FindOrganizationNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewFindOrganizationNotFound creates FindOrganizationNotFound with default headers values
func NewFindOrganizationNotFound() *FindOrganizationNotFound {

	return &FindOrganizationNotFound{}
}

// WithPayload adds the payload to the find organization not found response
func (o *FindOrganizationNotFound) WithPayload(payload *models.ErrorResponse) *FindOrganizationNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the find organization not found response
func (o *FindOrganizationNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FindOrganizationNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// FindOrganizationInternalServerErrorCode is the HTTP code returned for type FindOrganizationInternalServerError
const FindOrganizationInternalServerErrorCode int = 500

/*FindOrganizationInternalServerError Server error

swagger:response findOrganizationInternalServerError
*/
type FindOrganizationInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewFindOrganizationInternalServerError creates FindOrganizationInternalServerError with default headers values
func NewFindOrganizationInternalServerError() *FindOrganizationInternalServerError {

	return &FindOrganizationInternalServerError{}
}

// WithPayload adds the payload to the find organization internal server error response
func (o *FindOrganizationInternalServerError) WithPayload(payload *models.ErrorResponse) *FindOrganizationInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the find organization internal server error response
func (o *FindOrganizationInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FindOrganizationInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
