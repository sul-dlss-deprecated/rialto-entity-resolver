// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "title": "Rialto Entity Resolver",
    "version": "0.0.1"
  },
  "paths": {
    "/grant": {
      "get": {
        "security": [
          {
            "key": []
          }
        ],
        "produces": [
          "text/plain"
        ],
        "operationId": "FindGrant",
        "parameters": [
          {
            "type": "string",
            "description": "A grant identifier",
            "name": "identifier",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "returns a URI for the grant in RIALTO",
            "schema": {
              "description": "contains the actual URI",
              "type": "string"
            }
          },
          "404": {
            "description": "Grant not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/healthcheck": {
      "get": {
        "produces": [
          "application/json"
        ],
        "operationId": "healthCheck",
        "responses": {
          "200": {
            "description": "The service is working properly",
            "schema": {
              "$ref": "#/definitions/HealthCheckResponse"
            }
          },
          "503": {
            "description": "The service is not working properly",
            "schema": {
              "$ref": "#/definitions/HealthCheckResponse"
            }
          }
        }
      }
    },
    "/organization": {
      "get": {
        "security": [
          {
            "key": []
          }
        ],
        "produces": [
          "text/plain"
        ],
        "operationId": "FindOrganization",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the organization",
            "name": "name",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "The country that this organization is in.",
            "name": "country",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "returns a URI for the organization in Rialto",
            "schema": {
              "description": "contains the actual URI",
              "type": "string"
            }
          },
          "404": {
            "description": "Organization not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/person": {
      "get": {
        "security": [
          {
            "key": []
          }
        ],
        "produces": [
          "text/plain"
        ],
        "operationId": "findPerson",
        "parameters": [
          {
            "type": "string",
            "description": "First name of the person",
            "name": "first_name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Full name of the person",
            "name": "full_name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Last name of the person",
            "name": "last_name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "ORCID of the person",
            "name": "orcid",
            "in": "query"
          },
          {
            "type": "string",
            "description": "SUNet ID of the person",
            "name": "sunetid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "returns a URI for the person in Rialto",
            "schema": {
              "description": "contains the actual URI",
              "type": "string"
            }
          },
          "404": {
            "description": "Person not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/topic": {
      "get": {
        "security": [
          {
            "key": []
          }
        ],
        "produces": [
          "text/plain"
        ],
        "operationId": "FindTopic",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the topic",
            "name": "name",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "returns a URI for the topic in RIALTO",
            "schema": {
              "description": "contains the actual URI",
              "type": "string"
            }
          },
          "404": {
            "description": "Topic not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "properties": {
        "detail": {
          "description": "a human-readable explanation specific to this occurrence of the problem.",
          "type": "string",
          "example": "Title must contain at least three characters."
        },
        "status": {
          "description": "the HTTP status code applicable to this problem, expressed as a string value.",
          "type": "string",
          "example": 404
        },
        "title": {
          "description": "a short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem.",
          "type": "string",
          "example": "Invalid Attribute"
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        }
      }
    },
    "HealthCheckResponse": {
      "type": "object",
      "properties": {
        "status": {
          "description": "The status of the service",
          "type": "string"
        }
      },
      "example": {
        "status": "OK"
      }
    }
  },
  "securityDefinitions": {
    "key": {
      "type": "apiKey",
      "name": "X-API-Key",
      "in": "header"
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "title": "Rialto Entity Resolver",
    "version": "0.0.1"
  },
  "paths": {
    "/grant": {
      "get": {
        "security": [
          {
            "key": []
          }
        ],
        "produces": [
          "text/plain"
        ],
        "operationId": "FindGrant",
        "parameters": [
          {
            "type": "string",
            "description": "A grant identifier",
            "name": "identifier",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "returns a URI for the grant in RIALTO",
            "schema": {
              "description": "contains the actual URI",
              "type": "string"
            }
          },
          "404": {
            "description": "Grant not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/healthcheck": {
      "get": {
        "produces": [
          "application/json"
        ],
        "operationId": "healthCheck",
        "responses": {
          "200": {
            "description": "The service is working properly",
            "schema": {
              "$ref": "#/definitions/HealthCheckResponse"
            }
          },
          "503": {
            "description": "The service is not working properly",
            "schema": {
              "$ref": "#/definitions/HealthCheckResponse"
            }
          }
        }
      }
    },
    "/organization": {
      "get": {
        "security": [
          {
            "key": []
          }
        ],
        "produces": [
          "text/plain"
        ],
        "operationId": "FindOrganization",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the organization",
            "name": "name",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "The country that this organization is in.",
            "name": "country",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "returns a URI for the organization in Rialto",
            "schema": {
              "description": "contains the actual URI",
              "type": "string"
            }
          },
          "404": {
            "description": "Organization not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/person": {
      "get": {
        "security": [
          {
            "key": []
          }
        ],
        "produces": [
          "text/plain"
        ],
        "operationId": "findPerson",
        "parameters": [
          {
            "type": "string",
            "description": "First name of the person",
            "name": "first_name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Full name of the person",
            "name": "full_name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Last name of the person",
            "name": "last_name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "ORCID of the person",
            "name": "orcid",
            "in": "query"
          },
          {
            "type": "string",
            "description": "SUNet ID of the person",
            "name": "sunetid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "returns a URI for the person in Rialto",
            "schema": {
              "description": "contains the actual URI",
              "type": "string"
            }
          },
          "404": {
            "description": "Person not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/topic": {
      "get": {
        "security": [
          {
            "key": []
          }
        ],
        "produces": [
          "text/plain"
        ],
        "operationId": "FindTopic",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the topic",
            "name": "name",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "returns a URI for the topic in RIALTO",
            "schema": {
              "description": "contains the actual URI",
              "type": "string"
            }
          },
          "404": {
            "description": "Topic not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "properties": {
        "detail": {
          "description": "a human-readable explanation specific to this occurrence of the problem.",
          "type": "string",
          "example": "Title must contain at least three characters."
        },
        "status": {
          "description": "the HTTP status code applicable to this problem, expressed as a string value.",
          "type": "string",
          "example": 404
        },
        "title": {
          "description": "a short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem.",
          "type": "string",
          "example": "Invalid Attribute"
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        }
      }
    },
    "HealthCheckResponse": {
      "type": "object",
      "properties": {
        "status": {
          "description": "The status of the service",
          "type": "string"
        }
      },
      "example": {
        "status": "OK"
      }
    }
  },
  "securityDefinitions": {
    "key": {
      "type": "apiKey",
      "name": "X-API-Key",
      "in": "header"
    }
  }
}`))
}
